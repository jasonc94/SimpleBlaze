@page "/task"
@using SimpleBlazorApp.Models;
@using SimpleBlazorApp.Components.Pages.TaskPage.Components;

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<div class="container-fluid">
	<div class="row justify-content-between gx-5">
		<div class="col border rounded p-3">
			New

			@foreach (var task in Tasks(Models.TaskStatus.New))
			{
				<div class="py-3">
					<TaskItem WorkItem="task"></TaskItem>
				</div>

			}
		</div>
		<div class="col border rounded p-3">
			In-Progress
			@foreach (var task in Tasks(Models.TaskStatus.InProgress))
			{
				<div class="py-3">
					<TaskItem WorkItem="task"></TaskItem>
				</div>
			}
		</div>
		<div class="col border rounded p-3">
			Completed
			@foreach (var task in Tasks(Models.TaskStatus.Complete))
			{
				<div class="py-3">
					<TaskItem WorkItem="task"></TaskItem>
				</div>
			}
		</div>
	</div>
</div>




@code {
	private int currentCount = 0;
	private List<WorkItem>? tasks = null;
	protected override Task OnInitializedAsync()
	{
		tasks = new List<WorkItem>
		{
			new WorkItem()
			{
				Name = "Create Task Page",
				Description = "Create Task Page",
				CreatedDateTime = DateTime.UtcNow,
				Status = Models.TaskStatus.InProgress
			},
			new WorkItem()
			{
				Name = "Video Search Page",
				Description = "Create Video Search Page",
				CreatedDateTime = DateTime.UtcNow,
				Status = Models.TaskStatus.New
			},
						new WorkItem()
			{
				Name = "GIf Search Page",
				Description = "Create GIf Search Page",
				CreatedDateTime = DateTime.UtcNow,
				Status = Models.TaskStatus.New
			},

		};
		return base.OnInitializedAsync();
	}

	private IEnumerable<WorkItem> Tasks(Models.TaskStatus status)
	{
		return tasks.Where(t => t.Status == status);
	}



}
