@page "/task"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject ITasksService tasksService

@using SimpleBlazorApp.Components.Pages.TaskPage.Components;

<PageTitle>Global Tasks</PageTitle>

<div class="d-flex flex-row justify-content-between align-items-center mb-3">
	<h1>Tasks</h1>
	<NewTaskButton></NewTaskButton>
</div>

@if(tasks == null){
	<div>Loading...</div>
}else{
	<div class="container-fluid mb-3">
	<div class="row justify-content-between gx-5">

		@foreach (var status in statuses)
		{
			<div class="col border rounded p-3 mx-2">
				<span>@GetStatusDisplayName(status)</span>

				@foreach (var task in Tasks(status))
				{
					<div class="py-3">
						<TaskItem WorkItem="task"></TaskItem>
					</div>

				}
			</div>
		}
	</div>
</div>
}






@code {

	private IList<WorkItem>? tasks { get; set; }
	private List<Models.TaskStatus> statuses = new List<Models.TaskStatus>
	{
		Models.TaskStatus.New,
		Models.TaskStatus.InProgress,
		Models.TaskStatus.Complete,
	};

	protected override async Task OnInitializedAsync()
	{
		tasks = await tasksService.GetAllTasks();
		tasksService.OnStateChanged += async () => await TaskListChanged();
	}

	private IEnumerable<WorkItem> Tasks(Models.TaskStatus status)
	{
		return tasks.Where(t => t.Status == status);
	}

	private async Task TaskListChanged()
	{
		tasks = await tasksService.GetAllTasks();
		await InvokeAsync(() => StateHasChanged());
	}

	private string GetStatusDisplayName(Models.TaskStatus status)
	{
		return status switch
		{
			Models.TaskStatus.New => "New",
			Models.TaskStatus.InProgress => "In-Progress",
			Models.TaskStatus.Complete => "Completed",
			_ => status.ToString()
		};
	}
}
