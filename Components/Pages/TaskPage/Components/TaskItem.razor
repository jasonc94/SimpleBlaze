@inject ITasksService tasksService

@using Models;

<ConfirmDialog @ref="dialog" />

<Card>
	<CardHeader Class="d-flex flex-row justify-content-between align-items-center">
		<span class="card-title"> <strong>Name:</strong> @WorkItem.Name</span>
		<Button Color="ButtonColor.Danger" @onclick="ShowConfirmationAsync"> Delete </Button>
	</CardHeader>
	<CardBody Class="d-flex flex-column gap-2">
		<div class="d-flex flex-row justify-content-between align-items-center gap-3">
			<div class="d-flex flex-row align-items-center gap-1">
				<div class="status flex-shrink-0 @WorkItem.Status"></div>
				<span><strong>Status:</strong></span>
			</div>

			<select @onchange="OnStatusChanged" class="form-select" value="@WorkItem.Status">
				@foreach (var status in Enum.GetValues(typeof(Models.TaskStatus)).Cast<Models.TaskStatus>())
				{
					<option value="@status.ToString()">@GetStatusDisplayName(status)</option>
				}
			</select>

		</div>
		<footer class="d-flex flex-column gap-2">
			<strong>Created On:</strong> <span> @WorkItem.CreatedDateTime</span>
			@if (WorkItem.CompletedDateTime != null)
			{
				<strong>Completed On:</strong> <span> @WorkItem.CompletedDateTime</span>
			}
		</footer>
	</CardBody>
</Card>


@code {
	[Parameter]
	public WorkItem WorkItem { get; set; }

	private ConfirmDialog dialog = default!;

	private async Task OnStatusChanged(ChangeEventArgs e)
	{
		if (Enum.TryParse<Models.TaskStatus>(e.Value.ToString(), out var status))
		{
			WorkItem.Status = status;
			WorkItem.CompletedDateTime = status == Models.TaskStatus.Complete ? DateTime.UtcNow : null;
			tasksService.UpdateTask(WorkItem);
		}
	}

	private string GetStatusDisplayName(Models.TaskStatus status)
	{
		return status switch
		{
			Models.TaskStatus.New => "New",
			Models.TaskStatus.InProgress => "In-Progress",
			Models.TaskStatus.Complete => "Completed",
			_ => status.ToString()
		};
	}

	private async Task ShowConfirmationAsync()
	{
		var confirmation = await dialog.ShowAsync(
			title: "Confirmation",
			message1: "Are you sure you want to delete this?",
			confirmDialogOptions: new ConfirmDialogOptions { IsVerticallyCentered = true }
		);

		if (confirmation)
		{
			tasksService.DeleteTask(WorkItem);
		}
	}
}
