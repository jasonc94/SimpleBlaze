@inject ITasksService tasksService

<Button Color="ButtonColor.Primary" @onclick="ShowModal">Add New Task</Button>


<Modal @ref="modal" Title="Add New Task" IsVerticallyCentered="true">
	<BodyTemplate>
		<EditForm EditContext="@editContext" OnValidSubmit="CreateNewTask">
			<DataAnnotationsValidator />
			<div class="mb-3">
				<label class="form-label">Task Name: </label>
				<InputText @bind-Value="newTask.Name" class="form-control"></InputText>
				<ValidationMessage For="@(() => newTask.Name)" />
			</div>
			<div class="d-flex flex-row justify-content-end gap-2">
				<Button Color="ButtonColor.Secondary" @onclick="CloseModal">Close</Button>
				<Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Create</Button>
			</div>

		</EditForm>
	</BodyTemplate>
</Modal>

@code {

	private Modal modal = default!;
	private EditContext? editContext;
	private WorkItem? newTask;

	private async Task CreateNewTask()
	{
		await tasksService.AddNewTask(newTask);
		await CloseModal();
	}

	private async Task ShowModal()
	{
		newTask = new WorkItem()
			{
				Id = Guid.NewGuid().ToString(),
				CreatedDateTime = DateTime.UtcNow,
				Status = Models.TaskStatus.New
			};
		editContext = new EditContext(newTask);
		await modal.ShowAsync();
	}

	private async Task CloseModal()
	{
		await modal.HideAsync();
	}
}
